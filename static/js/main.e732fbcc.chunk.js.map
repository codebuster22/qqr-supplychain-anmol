{"version":3,"sources":["Form.js","Scan.js","App.js","serviceWorker.js","index.js"],"names":["Form","handleInputChange","handleOnSubmit","state","routeChange","className","id","htmlFor","type","name","onChange","value","EWB","consigner","consignee","articles","date","from","to","onClick","href","Scan","props","handleScan","data","setState","result","scan","console","log","fetchOrderDetails","ewb","a","fetch","mode","json","alert","handleError","err","toggleScan","route","this","delay","onError","onScan","style","width","Component","App","evt","target","checked","dataToBeSent","JSON","stringify","method","headers","body","flag","handleRouteChange","toString","renderAs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e732fbcc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({handleInputChange, handleOnSubmit, state, routeChange}) => {\r\n    return(\r\n        <div className={\"app-form\"}>\r\n            <main className=\"pa4 black-80\">\r\n                    <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\r\n                        <legend className=\"f4 fw6 ph0 mh0\">Form</legend>\r\n                        <div className=\"mt3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"EWB\">EWB</label>\r\n                            <input className=\"pa2 input-reset ba bg-transparent w-100\"\r\n                                   type=\"number\" name=\"EWB\" id=\"EWB\" onChange={handleInputChange} value={state.EWB}/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"consigner\">Consigner</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent w-100\"\r\n                                   type=\"text\" name=\"consigner\" id=\"consigner\" onChange={handleInputChange} value={state.consigner}/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"consignee\">Consignee</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent w-100\"\r\n                                   type=\"text\" name=\"consignee\" id=\"consignee\" onChange={handleInputChange} value={state.consignee}/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"articles\">Articles</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent w-100\"\r\n                                   type=\"text\" name=\"articles\" id=\"articles\" onChange={handleInputChange} value={state.articles}/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"date\">Date</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent w-100\"\r\n                                   type=\"date\" name=\"date\" id=\"date\" onChange={handleInputChange} value={state.date}/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"from\">From</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent  w-100\"\r\n                                   type=\"text\" name=\"from\" id=\"from\" onChange={handleInputChange} value={state.from}/>\r\n                        </div>\r\n                        <div className=\"mv3\">\r\n                            <label className=\"db fw6 lh-copy f6\" htmlFor=\"to\">To</label>\r\n                            <input className=\"b pa2 input-reset ba bg-transparent w-100\"\r\n                                   type=\"text\" name=\"to\" id=\"to\" onChange={handleInputChange} value={state.to}/>\r\n                        </div>\r\n                    </fieldset>\r\n                    <div className=\"\">\r\n                        <button className=\"b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib\" value=\"Submit\" onClick={handleOnSubmit}>Submit</button>\r\n                    </div>\r\n                    <div className=\"lh-copy mt3\">\r\n                        <p href=\"#0\" className=\"f6 link dim black db\" onClick={()=>routeChange('scan')}>Scan QR Code</p>\r\n                    </div>\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, {Component} from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nclass Scan extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            scan: false,\r\n            result: 'No Result',\r\n            data: {}\r\n        }\r\n    }\r\n\r\n    handleScan = data => {\r\n        if(data){\r\n            this.setState({\r\n                result: data,\r\n                scan: false,\r\n            })\r\n            console.log(data);\r\n            this.fetchOrderDetails(data);\r\n        }\r\n    }\r\n\r\n    fetchOrderDetails = async (ewb) => {\r\n        try{\r\n            const result = await fetch('https://dry-atoll-26666.herokuapp.com/profile/'+ewb,{\r\n                mode: 'cors',\r\n            });\r\n            const data = await result.json();\r\n            this.setState({data:data});\r\n        }catch (e) {\r\n            alert('Invalid Code');\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    handleError = err => {\r\n        console.log(err);\r\n    }\r\n\r\n    toggleScan = route => {\r\n        this.setState({scan: !this.state.scan})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={''}>\r\n                {this.state.scan?(\r\n                    <div className={'app-scan-true'}>\r\n                        <QrReader delay={300} onError={this.handleError} onScan={this.handleScan} style={{width: '100%'}}/>\r\n                        <button className={'pointer'} onClick={this.toggleScan}>Stop Scanning</button>\r\n                    </div>\r\n                ):this.state.result==='No Result'?(\r\n                    (\r\n                        <div className={'app-scan-false'}>\r\n                            <button className={'pointer'} onClick={this.toggleScan}>Start Scanner</button>\r\n                        </div>\r\n                    )\r\n                ):(\r\n                    <div className={'app-scan-false'}>\r\n                        <p>EWB:- {this.state.data.EWB}</p>\r\n                        <p>Consigner:- {this.state.data.consigner}</p>\r\n                        <p>Consignee:- {this.state.data.consignee}</p>\r\n                        <p>Articles:- {this.state.data.articles}</p>\r\n                        <p>Date:- {this.state.data.date}</p>\r\n                        <p>From:- {this.state.data.from}</p>\r\n                        <p>To:- {this.state.data.to}</p>\r\n                        <button className={'pointer'} onClick={this.toggleScan}>Start Scanner</button>\r\n                    </div>\r\n                )\r\n                }\r\n                <p className=\"f6 link dim black db\" onClick={()=>this.props.routeChange('create')}>Generate QR Code</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Scan","import React, {Component} from 'react';\nimport './App.css';\nimport QRCode from 'qrcode.react';\nimport Form from './Form.js'\nimport Scan from \"./Scan\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      consigner: \"\",\n      consignee: \"\",\n      articles: \"\",\n      date: \"\",\n      from: \"\",\n      to: \"\",\n      EWB: 0,\n      route: 'create',\n    }\n  };\n\n  handleInputChange = (evt) => {\n    const {target} = evt;\n    const value = target.type === 'checkbox'? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    })\n  };\n\n  handleOnSubmit = async () => {\n    console.log(\"Start Submit\")\n    console.log(\"State data at handleOnSubmit before post\",this.state);\n    const dataToBeSent = JSON.stringify(this.state);\n    console.log(\"json stringify at handleOnSubmit after post\",dataToBeSent)\n    const result = await fetch('https://dry-atoll-26666.herokuapp.com/fillDetails',{\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: dataToBeSent,\n    })\n    console.log(\"State data at handleOnSubmit after post\",this.state)\n    const data = await result.json();\n    if(data.flag){\n      alert(\"Data Saved\");\n    }\n    this.setState({\n      consigner: \"\",\n      consignee: \"\",\n      articles: \"\",\n      date: \"\",\n      from: \"\",\n      to: \"\",\n    })\n  }\n\n  handleRouteChange = (route) => {\n    this.setState({route: route});\n  }\n\n  render() {\n    return (\n        <div className=\"App \">\n          {this.state.route==='create'?(\n              <div className={'app-create'}>\n                <h1>Generate QR Code</h1>\n                <Form handleInputChange={this.handleInputChange} handleOnSubmit={this.handleOnSubmit} state={this.state} routeChange={this.handleRouteChange}/>\n                <QRCode value={this.state.EWB.toString()} renderAs={'canvas'}/>\n              </div>\n          ):(\n              <div className={'app-scan'}>\n                <h1>Scan QR Code</h1>\n                <Scan routeChange={this.handleRouteChange}/>\n              </div>\n          )}\n        </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}